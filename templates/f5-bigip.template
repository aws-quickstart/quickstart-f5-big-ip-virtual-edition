{
    "AWSTemplateFormatVersion": "2010-09-09",
    "Conditions": {
        "optin": {
            "Fn::Equals": [
                "Yes",
                {
                    "Ref": "allowUsageAnalytics"
                }
            ]
        },
        "noTargetGroup": {
            "Fn::Equals": [
                "none",
                {
                    "Ref": "bigipNetworkLoadBalancerTargetGroupsArns"
                }
            ]
        },
        "useDefaultCert": {
            "Fn::Equals": [
                "default",
                {
                    "Ref": "appCertificateS3Arn"
                }
            ]
        }
    },
    "Description": "LTM v2.9.0: This template deploys an auto scaling group for utility instances BIG-IP. Example scaling policies and CloudWatch alarms are associated with the auto scaling group.",
    "Metadata": {
        "AWS::CloudFormation::Interface": {
            "ParameterGroups": [
                {                                                                                     
                    "Label": {                                                                          
                        "default": "DEPLOYMENT"                                                           
                    },                                                                                  
                    "Parameters": [                                                                     
                        "deploymentName"                                                                  
                    ]                                                                                   
                }, 
                {
                    "Label": {
                        "default": "NETWORKING CONFIGURATION"
                    },
                    "Parameters": [
                        "vpc",
                        "availabilityZones",
                        "subnets",
                        "restrictedSrcAddress",
                        "bigipNetworkLoadBalancerTargetGroupsArns"
                    ]
                },
                {
                    "Label": {
                        "default": "INSTANCE CONFIGURATION"
                    },
                    "Parameters": [
                        "sshKey",
                        "throughput",
                        "instanceType",
                        "imageName",
                        "managementGuiPort",
                        "timezone",
                        "ntpServer"
                    ]
                },
                {
                    "Label": {
                        "default": "AUTO SCALING CONFIGURATION"
                    },
                    "Parameters": [
                        "scalingMinSize",
                        "scalingMaxSize",
                        "scaleDownBytesThreshold",
                        "scaleUpBytesThreshold",
                        "lowCpuThreshold",
                        "highCpuThreshold"
                    ]
                },
                {
                    "Label": {
                        "default": "LTM VIRTUAL SERVICE CONFIGURATION"
                    },
                    "Parameters": [
                        "virtualServicePort",
                        "appCertificateS3Arn",
                        "applicationPort",
                        "applicationPoolTagKey",
                        "application1PoolTagValue",
                        "application2PoolTagValue"
                    ]
                },
                {
                    "Label": {
                        "default": "TAGS"
                    },
                    "Parameters": [
                        "application",
                        "environment",
                        "group",
                        "owner",
                        "costcenter"
                    ]
                },
                {
                    "Label": {
                        "default": "TEMPLATE ANALYTICS"
                    },
                    "Parameters": [
                        "notificationEmail",
                        "allowUsageAnalytics"
                    ]
                }  
            ],
            "ParameterLabels": {
                "deploymentName" : {                                                              
                    "default": "Deployment Name"                                                    
                }, 
                "vpc": {
                    "default": "VPC ID"
                },
                "allowUsageAnalytics": {
                    "default": "Send Anonymous Statistics to F5"
                },
                "availabilityZones": {
                    "default": "Availability Zone(s)"
                },
                "subnets": {
                    "default": "Subnet ID(s)"
                },
                "restrictedSrcAddress": {
                    "default": "Restricted Source Address"
                },
                "bigipNetworkLoadBalancerTargetGroupsArns": {
                    "default": "Target Group(s) of Network Load Balancer for BIG-IP VEs"
                },
                "sshKey": {
                    "default": "SSH Key Name"
                },
                "throughput": {
                    "default": "Maximum Throughput"
                },
                "instanceType": {
                    "default": "AWS Instance Size"
                },
                "imageName": {
                    "default": "F5 Image Name"
                },
                "managementGuiPort": {
                    "default": "Management Port"
                },
                "timezone":{
                    "default": "Timezone (Olson)"
                },
                "ntpServer":{
                    "default": "NTP Server"
                },
                "scalingMinSize": {
                    "default": "Minimum Instances"
                },
                "scalingMaxSize": {
                    "default": "Maximum Instances"
                },
                "scaleDownBytesThreshold": {
                    "default": "Scale Down Bytes Threshold"
                },
                "scaleUpBytesThreshold": {
                    "default": "Scale Up Bytes Threshold"
                },
                "highCpuThreshold": {
                    "default": "High CPU % Threshold"
                },
                "lowCpuThreshold": {
                    "default": "Low CPU % Threshold"
                },
                "notificationEmail": {
                    "default": "Notification Email"
                },
                "virtualServicePort": {
                    "default": "Virtual Service Port"
                },
                "appCertificateS3Arn": {
                    "default": "S3 ARN of the SSL Certificate used for Application"
                },
                "applicationPort": {
                    "default": "Application Pool Member Port"
                },
                "applicationPoolTagKey": {
                    "default": "Application Pool Tag Key"
                },
                "application1PoolTagValue": {
                    "default": "Application1 Pool Tag Value"
                },
                "application2PoolTagValue": {
                    "default": "Application2 Pool Tag Value"
                },
                "application": {
                    "default": "F5DemoApp"
                },
                "environment": {
                    "default": "Environment"
                },
                "group": {
                    "default": "Group"
                },
                "owner": {
                    "default": "Owner"
                },
                "costcenter": {
                    "default": "Cost Center"
                }
            }
        },
        "Version": "2.9.0"
    },
    "Parameters": {
        "deploymentName" : {                                                                  
            "Description" : "Name is used as prefix for the object names",                    
            "Type" : "String",                                                                  
            "MaxLength": 25,                                                                    
            "Default": "f5quickstart"                                                                
        }, 
        "vpc": {
            "Description": "VPC where you want to deploy the BIG-IP VEs",
            "Type": "AWS::EC2::VPC::Id"
        },
        "allowUsageAnalytics": {
            "AllowedValues": [
                "Yes",
                "No"
            ],
            "Default": "Yes",
            "Description": "This deployment can send anonymous statistics to F5 to help us determine how to improve our solutions. If you select **No** statistics are not sent.",
            "Type": "String"
        },
        "availabilityZones": {
            "Description": "Availability Zones where you want to deploy BIG-IP VEs (we recommend at least 2)",
            "Type": "List<AWS::EC2::AvailabilityZone::Name>"
        },
        "subnets": {
            "Description": "Public or external subnet for the availability zones",
            "Type": "List<AWS::EC2::Subnet::Id>"
        },
        "restrictedSrcAddress" : {
            "Description" : " The IP address range x.x.x.x/x that can be used to SSH to the BIG-IP instances",
            "Type": "String",
            "MinLength": "9",
            "MaxLength": "18",
            "AllowedPattern": "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})",
            "ConstraintDescription": "must be a valid IP CIDR range of the form x.x.x.x/x."
        },
        "bigipNetworkLoadBalancerTargetGroupsArns": {
            "Description": "ARN of target group(s) for AWS Network Load Balancer for the BIG-IP VEs",
            "Type": "String",
            "Default": "none"
        },
        "sshKey": {
            "Description": "EC2 KeyPair to enable SSH access to the BIG-IP instance",
            "Type": "AWS::EC2::KeyPair::KeyName"
        },
        "instanceType": {
            "Description": "AWS Instance Size",
            "Type": "String",
            "Default": "m4.xlarge",
            "AllowedValues": [
                "t2.medium",
                "t2.large",
                "t2.xlarge",
                "m3.large",
                "m3.xlarge",
                "m3.2xlarge",
                "m4.large",
                "m4.xlarge",
                "m4.2xlarge",
                "m4.4xlarge",
                "m4.10xlarge",
                "c3.xlarge",
                "c3.2xlarge",
                "c3.4xlarge",
                "c3.8xlarge",
                "c4.xlarge",
                "c4.2xlarge",
                "c4.4xlarge",
                "c4.8xlarge"
            ],
            "ConstraintDescription": "Must be a valid BIG-IP BEST virtual EC2 instance type."
        },
        "throughput": {
            "Description": "Maximum amount of throughput for BIG-IP VE",
            "Type": "String",
            "Default": "25Mbps",
            "AllowedValues": [
                "25Mbps",
                "200Mbps",
                "1000Mbps",
                "5000Mbps"
            ],
            "ConstraintDescription": "Select the BIG-IP throughput you want to use"
        },
        "imageName": {
            "Description": "F5 Image Name for the BIG-IP VE",
            "Type": "String",
            "Default": "Good",
            "AllowedValues": [
                "Good",
                "Better",
                "Best"
            ],
            "ConstraintDescription": "Select the F5 Image Name for the BIG-IP VE"
        },
        "managementGuiPort": {
            "Description": "Port for the BIG-IP management Configuration utility",
            "Type": "Number",
            "Default": 8443,
            "ConstraintDescription": "Must be a valid, unused port on the BIG-IP."
        },
        "timezone": {
            "Description": "Olson timezone string from /usr/share/zoneinfo",
            "Default": "UTC",
            "Type": "String"
        },
        "ntpServer": {
            "Description": "NTP server for this implementation",
            "Default": "0.pool.ntp.org",
            "Type": "String"
        },
        "scalingMinSize": {
            "Description": "Minimum number of BIG-IP instances (1-8) you want available in the Auto Scale Group",
            "Default": "1",
            "ConstraintDescription": "Must be a number between 1-8",
            "Type": "Number",
            "MaxValue": "8",
            "MinValue": "1"
        },
        "scalingMaxSize": {
            "Description": "Maximum number of BIG-IP instances (1-8) that can be created in the Auto Scale Group",
            "Default": "1",
            "ConstraintDescription": "Must be a number between 1-8.",
            "Type": "Number",
            "MaxValue": "8",
            "MinValue": "1"
        },
        "scaleDownBytesThreshold": {
            "Description": "Incoming bytes threshold to begin scaling down BIG-IP VE instances",
            "Default": "10000",
            "Type": "Number"
        },
        "scaleUpBytesThreshold": {
            "Description": "Incoming bytes threshold to begin scaling up BIG-IP VE instances",
            "Default": "35000",
            "Type": "Number"
        },
        "highCpuThreshold": {
            "Description": "High CPU % threshold to begin scaling up BIG-IP VE instances",
            "Default": "80",
            "Type": "Number",
            "MaxValue": "100",
            "MinValue": "0"
        },
        "lowCpuThreshold": {
            "Description": "Low CPU % threshold to begin scaling down BIG-IP VE instances",
            "Default": "0",
            "Type": "Number",
            "MaxValue": "100",
            "MinValue": "0"
        },
        "notificationEmail": {
            "Description": "Valid email address to send Auto Scaling event notifications",
            "ConstraintDescription": "Must be a valid email address.",
            "AllowedPattern": ".+@.+",
            "Type": "String"
        },
        "virtualServicePort": {
            "Description": "Port for the virtual service on BIG-IP VE. Must be a valid port number (1-65535) except port 80.",
            "Default": "443",
            "ConstraintDescription": "Must be a valid port number (1-65535) except port 80.",
            "Type": "Number",
            "MaxValue": "65535",
            "MinValue": "1"
        },
        "appCertificateS3Arn": {
            "ConstraintDescription": "Verify S3 ARN of pfx ssl certificate used for application",
            "Description": "S3 ARN (arn:aws:s3:::bucket_name/full_path_to_object) of pfx ssl certificate used for application - ex. arn:aws:s3:::my_corporate_bucket/website.pfx",
            "Default": "default",
            "MaxLength": "255",
            "MinLength": "1",
            "Type": "String"
        },
        "applicationPort": {
            "Description": "Port for the application pool member on BIG-IP VE. Must be a valid port number (1-65535).",
            "Default": "80",
            "ConstraintDescription": "Must be a valid port number (1-65535).",
            "Type": "Number",
            "MaxValue": "65535",
            "MinValue": "1"
        },
        "applicationPoolTagKey": {
            "Description": "This is used for the Service Discovery feature. BIG-IPs would automatically discovers the pool members you have tagged with this key and the value you specify next.",
            "Type": "String"
        },
        "application1PoolTagValue": {
            "Description": "This is used for the Service Discovery feature. BIG-IPs would automatically discovers the pool members you have tagged with the key you specified and this value.",
            "Type": "String"
        },
        "application2PoolTagValue": {
            "Description": "This is used for the Service Discovery feature. BIG-IPs would automatically discovers the pool members you have tagged with the key you specified and this value.",
            "Type": "String"
        },
        "application": {
            "Default": "f5demoapp",
            "Description": "Application Tag",
            "Type": "String"
        },
        "environment": {
            "Default": "f5env",
            "Description": "Environment Name Tag",
            "Type": "String"
        },
        "group": {
            "Default": "f5group",
            "Description": "Group Tag",
            "Type": "String"
        },
        "owner": {
            "Default": "f5owner",
            "Description": "Owner Tag",
            "Type": "String"
        },
        "costcenter": {
            "Default": "f5costcenter",
            "Description": "Cost Center Tag",
            "Type": "String"
        }
    },
    "Mappings": {
        "BigipRegionMap": {
            "ap-northeast-1": {
                "Best1000Mbps": "ami-2e4d3048", 
                "Best200Mbps": "ami-05522f63", 
                "Best25Mbps": "ami-d34c31b5", 
                "Best5000Mbps": "ami-fc4f329a", 
                "Better1000Mbps": "ami-8f532ee9", 
                "Better200Mbps": "ami-11522f77", 
                "Better25Mbps": "ami-73522f15", 
                "Better5000Mbps": "ami-75532e13", 
                "Good1000Mbps": "ami-c6522fa0", 
                "Good200Mbps": "ami-ba532edc", 
                "Good25Mbps": "ami-9e522ff8", 
                "Good5000Mbps": "ami-5e4d3038"
            }, 
            "ap-northeast-2": {
                "Best1000Mbps": "ami-1955f777", 
                "Best200Mbps": "ami-a654f6c8", 
                "Best25Mbps": "ami-0f57f561", 
                "Best5000Mbps": "ami-4954f627", 
                "Better1000Mbps": "ami-7554f61b", 
                "Better200Mbps": "ami-0d57f563", 
                "Better25Mbps": "ami-7e54f610", 
                "Better5000Mbps": "ami-0155f76f", 
                "Good1000Mbps": "ami-9e51f3f0", 
                "Good200Mbps": "ami-a757f5c9", 
                "Good25Mbps": "ami-a354f6cd", 
                "Good5000Mbps": "ami-9151f3ff"
            }, 
            "ap-south-1": {
                "Best1000Mbps": "ami-871e43e8", 
                "Best200Mbps": "ami-fc194493", 
                "Best25Mbps": "ami-851944ea", 
                "Best5000Mbps": "ami-941845fb", 
                "Better1000Mbps": "ami-011f426e", 
                "Better200Mbps": "ami-961b46f9", 
                "Better25Mbps": "ami-6b1f4204", 
                "Better5000Mbps": "ami-ed1a4782", 
                "Good1000Mbps": "ami-201c414f", 
                "Good200Mbps": "ami-6419440b", 
                "Good25Mbps": "ami-6f1f4200", 
                "Good5000Mbps": "ami-a81c41c7"
            }, 
            "ap-southeast-1": {
                "Best1000Mbps": "ami-d5bffda9", 
                "Best200Mbps": "ami-2ab8fa56", 
                "Best25Mbps": "ami-a3b9fbdf", 
                "Best5000Mbps": "ami-3bbefc47", 
                "Better1000Mbps": "ami-56bffd2a", 
                "Better200Mbps": "ami-3db9fb41", 
                "Better25Mbps": "ami-9eb9fbe2", 
                "Better5000Mbps": "ami-eeb9fb92", 
                "Good1000Mbps": "ami-45b8fa39", 
                "Good200Mbps": "ami-73bbf90f", 
                "Good25Mbps": "ami-3cbbf940", 
                "Good5000Mbps": "ami-72bbf90e"
            }, 
            "ap-southeast-2": {
                "Best1000Mbps": "ami-1eb2777c", 
                "Best200Mbps": "ami-dab376b8", 
                "Best25Mbps": "ami-38b3765a", 
                "Best5000Mbps": "ami-0db2776f", 
                "Better1000Mbps": "ami-07b37665", 
                "Better200Mbps": "ami-99b075fb", 
                "Better25Mbps": "ami-f2b07590", 
                "Better5000Mbps": "ami-12b37670", 
                "Good1000Mbps": "ami-e7b07585", 
                "Good200Mbps": "ami-d5b075b7", 
                "Good25Mbps": "ami-fbb07599", 
                "Good5000Mbps": "ami-cab075a8"
            }, 
            "ca-central-1": {
                "Best1000Mbps": "ami-9278fcf6", 
                "Best200Mbps": "ami-a27efac6", 
                "Best25Mbps": "ami-62078306", 
                "Best5000Mbps": "ami-527afe36", 
                "Better1000Mbps": "ami-840480e0", 
                "Better200Mbps": "ami-b773f7d3", 
                "Better25Mbps": "ami-d37bffb7", 
                "Better5000Mbps": "ami-937cf8f7", 
                "Good1000Mbps": "ami-e277f386", 
                "Good200Mbps": "ami-c70783a3", 
                "Good25Mbps": "ami-63078307", 
                "Good5000Mbps": "ami-c40783a0"
            }, 
            "eu-central-1": {
                "Best1000Mbps": "ami-39214056", 
                "Best200Mbps": "ami-06dcba69", 
                "Best25Mbps": "ami-a8ddbbc7", 
                "Best5000Mbps": "ami-6f214000", 
                "Better1000Mbps": "ami-0fdcba60", 
                "Better200Mbps": "ami-58dcba37", 
                "Better25Mbps": "ami-c4ddbbab", 
                "Better5000Mbps": "ami-d1ddbbbe", 
                "Good1000Mbps": "ami-7edcba11", 
                "Good200Mbps": "ami-fcddbb93", 
                "Good25Mbps": "ami-33dfb95c", 
                "Good5000Mbps": "ami-fadabc95"
            }, 
            "eu-west-1": {
                "Best1000Mbps": "ami-fc2f5f85", 
                "Best200Mbps": "ami-71275708", 
                "Best25Mbps": "ami-0227577b", 
                "Best5000Mbps": "ami-e711619e", 
                "Better1000Mbps": "ami-ec2b5b95", 
                "Better200Mbps": "ami-862858ff", 
                "Better25Mbps": "ami-c92757b0", 
                "Better5000Mbps": "ami-5728582e", 
                "Good1000Mbps": "ami-4526563c", 
                "Good200Mbps": "ami-4229593b", 
                "Good25Mbps": "ami-fc285885", 
                "Good5000Mbps": "ami-cc2757b5"
            }, 
            "eu-west-2": {
                "Best1000Mbps": "ami-da0ce9bd", 
                "Best200Mbps": "ami-530fea34", 
                "Best25Mbps": "ami-030fea64", 
                "Best5000Mbps": "ami-590eeb3e", 
                "Better1000Mbps": "ami-2a0ce94d", 
                "Better200Mbps": "ami-570fea30", 
                "Better25Mbps": "ami-1a0de87d", 
                "Better5000Mbps": "ami-560fea31", 
                "Good1000Mbps": "ami-390fea5e", 
                "Good200Mbps": "ami-d20ce9b5", 
                "Good25Mbps": "ami-380fea5f", 
                "Good5000Mbps": "ami-520eeb35"
            }, 
            "sa-east-1": {
                "Best1000Mbps": "ami-a02960cc", 
                "Best200Mbps": "ami-6029600c", 
                "Best25Mbps": "ami-d62960ba", 
                "Best5000Mbps": "ami-9f2960f3", 
                "Better1000Mbps": "ami-5a165f36", 
                "Better200Mbps": "ami-25175e49", 
                "Better25Mbps": "ami-8c175ee0", 
                "Better5000Mbps": "ami-dd165fb1", 
                "Good1000Mbps": "ami-cd165fa1", 
                "Good200Mbps": "ami-e0175e8c", 
                "Good25Mbps": "ami-04175e68", 
                "Good5000Mbps": "ami-49296025"
            }, 
            "us-east-1": {
                "Best1000Mbps": "ami-781e0302", 
                "Best200Mbps": "ami-0f1b0675", 
                "Best25Mbps": "ami-0e170a74", 
                "Best5000Mbps": "ami-33190449", 
                "Better1000Mbps": "ami-f31c0189", 
                "Better200Mbps": "ami-77617c0d", 
                "Better25Mbps": "ami-b31805c9", 
                "Better5000Mbps": "ami-78617c02", 
                "Good1000Mbps": "ami-dd607da7", 
                "Good200Mbps": "ami-fd1f0287", 
                "Good25Mbps": "ami-161c016c", 
                "Good5000Mbps": "ami-6c627f16"
            }, 
            "us-east-2": {
                "Best1000Mbps": "ami-9cffcbf9", 
                "Best200Mbps": "ami-06feca63", 
                "Best25Mbps": "ami-defcc8bb", 
                "Best5000Mbps": "ami-e0feca85", 
                "Better1000Mbps": "ami-39fdc95c", 
                "Better200Mbps": "ami-3afdc95f", 
                "Better25Mbps": "ami-83fecae6", 
                "Better5000Mbps": "ami-3bfdc95e", 
                "Good1000Mbps": "ami-6dfdc908", 
                "Good200Mbps": "ami-32fdc957", 
                "Good25Mbps": "ami-8efdc9eb", 
                "Good5000Mbps": "ami-e8fcc88d"
            }, 
            "us-gov-west-1": {
                "Best1000Mbps": "ami-651d9504", 
                "Best200Mbps": "ami-72199113", 
                "Best25Mbps": "ami-a51991c4", 
                "Best5000Mbps": "ami-501c9431", 
                "Better1000Mbps": "ami-12189073", 
                "Better200Mbps": "ami-cd1890ac", 
                "Better25Mbps": "ami-f9058d98", 
                "Better5000Mbps": "ami-7b18901a", 
                "Good1000Mbps": "ami-dc058dbd", 
                "Good200Mbps": "ami-5a18903b", 
                "Good25Mbps": "ami-ca068eab", 
                "Good5000Mbps": "ami-9f068efe"
            },
            "us-west-1": {
                "Best1000Mbps": "ami-6a747d0a", 
                "Best200Mbps": "ami-24777e44", 
                "Best25Mbps": "ami-57747d37", 
                "Best5000Mbps": "ami-09747d69", 
                "Better1000Mbps": "ami-2e777e4e", 
                "Better200Mbps": "ami-13727b73", 
                "Better25Mbps": "ami-cf757caf", 
                "Better5000Mbps": "ami-4a757c2a", 
                "Good1000Mbps": "ami-63757c03", 
                "Good200Mbps": "ami-41747d21", 
                "Good25Mbps": "ami-cc757cac", 
                "Good5000Mbps": "ami-40747d20"
            }, 
            "us-west-2": {
                "Best1000Mbps": "ami-4225a53a", 
                "Best200Mbps": "ami-a01f9fd8", 
                "Best25Mbps": "ami-1325a56b", 
                "Best5000Mbps": "ami-2d25a555", 
                "Better1000Mbps": "ami-9e24a4e6", 
                "Better200Mbps": "ami-f721a18f", 
                "Better25Mbps": "ami-8e21a1f6", 
                "Better5000Mbps": "ami-2924a451", 
                "Good1000Mbps": "ami-751f9f0d", 
                "Good200Mbps": "ami-4923a331", 
                "Good25Mbps": "ami-d11e9ea9", 
                "Good5000Mbps": "ami-0c24a474"
            }
        },
        "AWSBigipThrougput": {
            "25Mbps": {
                "Good": "Good25Mbps",
                "Better": "Better25Mbps",
                "Best": "Best25Mbps"
            },
            "200Mbps": {
                "Good": "Good200Mbps",
                "Better": "Better200Mbps",
                "Best": "Best200Mbps"
            },
            "1000Mbps": {
                "Good": "Good1000Mbps",
                "Better": "Better1000Mbps",
                "Best": "Best1000Mbps"
            },
            "5000Mbps": {
                "Good": "Good5000Mbps",
                "Better": "Better5000Mbps",
                "Best": "Best5000Mbps"
            }
        }
    },
    "Resources": {
        "bigipSecurityGroup": {
            "Type": "AWS::EC2::SecurityGroup",
            "Properties": {
                "VpcId": {
                    "Ref": "vpc"
                },
                "GroupDescription": "Enable SSH access via port 22 and enable access to virtual servers on 80 and 443",
                "SecurityGroupIngress": [
                    {
                        "IpProtocol": "tcp",
                        "FromPort": "22",
                        "ToPort": "22",
                        "CidrIp": { "Ref": "restrictedSrcAddress" }
                    },
                    {
                        "IpProtocol": "tcp",
                        "FromPort": "80",
                        "ToPort": "80",
                        "CidrIp": "0.0.0.0/0"
                    },
                    {
                        "IpProtocol": "tcp",
                        "FromPort": "443",
                        "ToPort": "443",
                        "CidrIp": "0.0.0.0/0"
                    },
                    {
                        "IpProtocol": "tcp",
                        "FromPort": {
                          "Ref": "managementGuiPort"
                        },
                        "ToPort": {
                          "Ref": "managementGuiPort"
                        },
                        "CidrIp": { "Ref": "restrictedSrcAddress" }
                    }
                ],
                "Tags": [
                    {
                        "Key": "Name",
                        "Value": {
                            "Fn::Join": [
                                "",
                                [
                                    "BIG-IP-autoscale-security-group-",
                                    {
                                        "Ref": "deploymentName"
                                    }
                                ]
                            ]
                        }
                    },
                    {
                        "Key": "Application",
                        "Value": {
                            "Ref": "application"
                        }
                    },
                    {
                        "Key": "Environment",
                        "Value": {
                            "Ref": "environment"
                        }
                    },
                    {
                        "Key": "Group",
                        "Value": {
                            "Ref": "group"
                        }
                    },
                    {
                        "Key": "Owner",
                        "Value": {
                            "Ref": "owner"
                        }
                    },
                    {
                        "Key": "Costcenter",
                        "Value": {
                            "Ref": "costcenter"
                        }
                    }
                ]
            }
        },
        "bigipSecurityGroupIngressManagementGuiPort": {
            "Type": "AWS::EC2::SecurityGroupIngress",
            "Properties": {
                "GroupId": { "Ref": "bigipSecurityGroup" },
                "IpProtocol": "tcp",
                "FromPort": { "Ref": "managementGuiPort" },
                "ToPort": { "Ref": "managementGuiPort" },
                "SourceSecurityGroupId": { "Ref": "bigipSecurityGroup" }
            }
        },
        "bigipSecurityGroupIngressConfigSync": {
            "Type": "AWS::EC2::SecurityGroupIngress",
            "Properties": {
                "GroupId": { "Ref": "bigipSecurityGroup" },
                "IpProtocol": "tcp",
                "FromPort": "4353",
                "ToPort": "4353",
                "SourceSecurityGroupId": { "Ref": "bigipSecurityGroup" }
            }
        },
        "S3Bucket": {
            "Type": "AWS::S3::Bucket",
            "Properties": {
                "AccessControl": "BucketOwnerFullControl"
            }
        },
        "SQSQueue": {
            "Type" : "AWS::SQS::Queue",
            "Properties" : {
                "MessageRetentionPeriod": 3600
            }
        },
        "BigipAutoScalingAccessRole": {
            "Type": "AWS::IAM::Role",
            "Properties": {
                "AssumeRolePolicyDocument": {
                    "Version": "2012-10-17",
                    "Statement": [
                        {
                            "Effect": "Allow",
                            "Principal": {
                                "Service": [
                                    "ec2.amazonaws.com"
                                ]
                            },
                            "Action": [
                                "sts:AssumeRole"
                            ]
                        }
                    ]
                },
                "Path": "/",
                "Policies": [
                    "Fn::If" : [
                        "useDefaultCert",
                        {
                            "PolicyName": "BigipAutoScalingAcccessPolicy",
                            "PolicyDocument": {
                                "Version": "2012-10-17",
                                "Statement": [
                                    {
                                        "Effect": "Allow",
                                        "Action": [
                                            "s3:ListBucket"
                                        ],
                                        "Resource": {
                                            "Fn::Join": [
                                                "",
                                                [
                                                    "arn:*:s3:::",
                                                    {
                                                        "Ref": "S3Bucket"
                                                    }
                                                ]
                                            ]
                                        }
                                    },
                                    {
                                        "Effect": "Allow",
                                        "Action": [
                                            "s3:PutObject",
                                            "s3:GetObject",
                                            "s3:DeleteObject"
                                        ],
                                        "Resource": {
                                            "Fn::Join": [
                                                "",
                                                [
                                                    "arn:*:s3:::",
                                                    {
                                                        "Ref": "S3Bucket"
                                                    },
                                                    "/*"
                                                ]
                                            ]
                                        }
                                    },
                                    {
                                        "Effect": "Allow",
                                        "Action": [
                                            "sqs:SendMessage",
                                            "sqs:ReceiveMessage",
                                            "sqs:DeleteMessage"
                                        ],
                                        "Resource": {
                                            "Fn::GetAtt": [ "SQSQueue", "Arn" ]
                                        }
                                    },
                                    {
                                        "Effect": "Allow",
                                        "Action": [
                                            "autoscaling:DescribeAutoScalingGroups",
                                            "autoscaling:DescribeAutoScalingInstances",
                                            "autoscaling:SetInstanceProtection",
                                            "ec2:DescribeInstances",
                                            "ec2:DescribeInstanceStatus",
                                            "ec2:DescribeAddresses",
                                            "ec2:AssociateAddress",
                                            "ec2:DisassociateAddress",
                                            "ec2:DescribeNetworkInterfaces",
                                            "ec2:DescribeNetworkInterfaceAttributes",
                                            "ec2:DescribeRouteTables",
                                            "ec2:ReplaceRoute",
                                            "ec2:assignprivateipaddresses",
                                            "sts:AssumeRole",
                                            "cloudwatch:PutMetricData"
                                        ],
                                        "Resource": [
                                            "*"
                                        ]
                                    }
                                ]
                            }
                        },
                        {
                            "PolicyName": "BigipAutoScalingAcccessPolicy",
                            "PolicyDocument": {
                                "Version": "2012-10-17",
                                "Statement": [
                                    {
                                        "Effect": "Allow",
                                        "Action": [
                                            "s3:ListBucket"
                                        ],
                                        "Resource": {
                                            "Fn::Join": [
                                                "",
                                                [
                                                    "arn:*:s3:::",
                                                    {
                                                        "Ref": "S3Bucket"
                                                    }
                                                ]
                                            ]
                                        }
                                    },
                                    {
                                        "Effect": "Allow",
                                        "Action": [
                                            "s3:PutObject",
                                            "s3:GetObject",
                                            "s3:DeleteObject"
                                        ],
                                        "Resource": {
                                            "Fn::Join": [
                                                "",
                                                [
                                                    "arn:*:s3:::",
                                                    {
                                                        "Ref": "S3Bucket"
                                                    },
                                                    "/*"
                                                ]
                                            ]
                                        }
                                    },
                                    {
                                        "Effect": "Allow",
                                        "Action": [
                                            "sqs:SendMessage",
                                            "sqs:ReceiveMessage",
                                            "sqs:DeleteMessage"
                                        ],
                                        "Resource": {
                                            "Fn::GetAtt": [ "SQSQueue", "Arn" ]
                                        }
                                    },
                                    {
                                        "Effect": "Allow",
                                        "Action": [
                                            "autoscaling:DescribeAutoScalingGroups",
                                            "autoscaling:DescribeAutoScalingInstances",
                                            "autoscaling:SetInstanceProtection",
                                            "ec2:DescribeInstances",
                                            "ec2:DescribeInstanceStatus",
                                            "ec2:DescribeAddresses",
                                            "ec2:AssociateAddress",
                                            "ec2:DisassociateAddress",
                                            "ec2:DescribeNetworkInterfaces",
                                            "ec2:DescribeNetworkInterfaceAttributes",
                                            "ec2:DescribeRouteTables",
                                            "ec2:ReplaceRoute",
                                            "ec2:assignprivateipaddresses",
                                            "sts:AssumeRole",
                                            "cloudwatch:PutMetricData"
                                        ],
                                        "Resource": [
                                            "*"
                                        ]
                                    },
                                    {
                                        "Action": [
                                            "s3:GetObject"
                                        ],
                                        "Effect": "Allow",
                                        "Resource": {
                                            "Ref": "appCertificateS3Arn"
                                        }
                                    }
                                ]
                            }
                        }
                    ]
                ]
            }
        },
        "BigipAutoScalingInstanceProfile": {
            "Type": "AWS::IAM::InstanceProfile",
            "Properties": {
                "Path": "/",
                "Roles": [
                    {
                        "Ref": "BigipAutoScalingAccessRole"
                    }
                ]
            }
        },
        "SNSTopic": {
            "Type": "AWS::SNS::Topic",
            "Properties": {
                "Subscription": [
                    {
                        "Endpoint": {
                            "Ref": "notificationEmail"
                        },
                        "Protocol": "email"
                    }
                ]
            }
        },
        "BigipLaunchConfig": {
            "Type": "AWS::AutoScaling::LaunchConfiguration",
            "Metadata": {
                "AWS::CloudFormation::Init": {
                    "config": {
                        "files": {
                            "/config/cloud/f5.http.v1.2.0rc7.tmpl": {
                                "source": "http://cdn.f5.com/product/blackbox/aws/f5.http.v1.2.0rc7.tmpl",
                                "mode": "000644",
                                "owner": "root",
                                "group": "root"
                            },
                            "/config/cloud/f5-cloud-libs.tar.gz": {
                                "source": "https://raw.githubusercontent.com/F5Networks/f5-cloud-libs/v3.6.2/dist/f5-cloud-libs.tar.gz",
                                "mode": "000644",
                                "owner": "root",
                                "group": "root"
                            },
                            "/config/cloud/f5-cloud-libs-aws.tar.gz": {
                                "source": "https://raw.githubusercontent.com/F5Networks/f5-cloud-libs-aws/v1.6.0/dist/f5-cloud-libs-aws.tar.gz",
                                "mode": "000644",
                                "owner": "root",
                                "group": "root"
                            },
                            "/config/cloud/aws/f5.service_discovery.tmpl": {
                                "group": "root",
                                "mode": "000644",
                                "owner": "root",
                                "source": "https://raw.githubusercontent.com/F5Networks/f5-cloud-iapps/v1.2.1/f5-service-discovery/f5.service_discovery.tmpl"
                            },
                            "/config/cloud/aws/onboard_config_vars": {
                                "content": {
                                    "Fn::Join": [
                                        "",
                                        [
                                            "#!/bin/bash\n",
                                            "# Generated from v2.9.0\n",
                                            "hostname=`curl http://169.254.169.254/latest/meta-data/hostname`\n",
                                            "region='",{"Ref": "AWS::Region"},"'\n",
                                            "deploymentName='",{"Ref": "deploymentName"},"'\n",
                                            "managementGuiPort='",{"Ref": "managementGuiPort"},"'\n",
                                            "timezone='",{"Ref": "timezone"},"'\n",
                                            "ntpServer='",{"Ref": "ntpServer"},"'\n",
                                            "virtualServicePort='",{"Ref": "virtualServicePort"},"'\n",
                                            "applicationPort='",{"Ref": "applicationPort"},"'\n",
                                            "applicationPoolTagKey='",{"Ref": "applicationPoolTagKey"},"'\n",
                                            "application1PoolTagValue='",{"Ref": "application1PoolTagValue"},"'\n",
                                            "application2PoolTagValue='",{"Ref": "application2PoolTagValue"},"'\n",
                                            "s3Bucket='",{"Ref": "S3Bucket"},"'\n",
                                            "sqsUrl='",{"Ref": "SQSQueue"},"'\n",
                                            "appCertificateS3Arn='",{"Ref": "appCertificateS3Arn"},"'\n"
                                        ]
                                    ]
                                }
                            },
                            "/config/verifyHash": {
                                "content": "cli script /Common/verifyHash {\nproc script::run {} {\n        if {[catch {\n            set hashes(f5-cloud-libs.tar.gz) 4cf5edb76d2e8dd0493f4892ff3679a58c8c79b1c02e550b55150d9002228c24c6d841095f1edd33fb49c5aaea518771252b4fb6d423a8a4ba8d94a0baf0f77a\n            set hashes(f5-cloud-libs-aws.tar.gz) 1a4ba191e997b2cfaaee0104deccc0414a6c4cc221aedc65fbdec8e47a72f1d5258b047d6487a205fa043fdbd6c8fcb1b978cac36788e493e94a4542f90bd92b\n            set hashes(f5-cloud-libs-azure.tar.gz) 5c256d017d0a57f5c96c2cb43f4d8b76297ae0b91e7a11c6d74e5c14268232f6a458bf0c16033b992040be076e934392c69f32fc8beffe070b5d84924ec7b947\n            set hashes(f5-cloud-libs-gce.tar.gz) 6ef33cc94c806b1e4e9e25ebb96a20eb1fe5975a83b2cd82b0d6ccbc8374be113ac74121d697f3bfc26bf49a55e948200f731607ce9aa9d23cd2e81299a653c1\n            set hashes(f5-cloud-libs-openstack.tar.gz) fb6d63771bf0c8d9cae9271553372f7fb50ce2e7a653bb3fb8b7d57330a18d72fa620e844b579fe79c8908a3873b2d33ee41803f23ea6c5dc9f7d7e943e68c3a\n            set hashes(asm-policy-linux.tar.gz) 63b5c2a51ca09c43bd89af3773bbab87c71a6e7f6ad9410b229b4e0a1c483d46f1a9fff39d9944041b02ee9260724027414de592e99f4c2475415323e18a72e0\n            set hashes(f5.http.v1.2.0rc4.tmpl) 47c19a83ebfc7bd1e9e9c35f3424945ef8694aa437eedd17b6a387788d4db1396fefe445199b497064d76967b0d50238154190ca0bd73941298fc257df4dc034\n            set hashes(f5.http.v1.2.0rc6.tmpl) 811b14bffaab5ed0365f0106bb5ce5e4ec22385655ea3ac04de2a39bd9944f51e3714619dae7ca43662c956b5212228858f0592672a2579d4a87769186e2cbfe\n            set hashes(f5.http.v1.2.0rc7.tmpl) 21f413342e9a7a281a0f0e1301e745aa86af21a697d2e6fdc21dd279734936631e92f34bf1c2d2504c201f56ccd75c5c13baa2fe7653213689ec3c9e27dff77d\n            set hashes(f5.aws_advanced_ha.v1.3.0rc1.tmpl) 9e55149c010c1d395abdae3c3d2cb83ec13d31ed39424695e88680cf3ed5a013d626b326711d3d40ef2df46b72d414b4cb8e4f445ea0738dcbd25c4c843ac39d\n            set hashes(f5.aws_advanced_ha.v1.4.0rc1.tmpl) de068455257412a949f1eadccaee8506347e04fd69bfb645001b76f200127668e4a06be2bbb94e10fefc215cfc3665b07945e6d733cbe1a4fa1b88e881590396\n            set hashes(f5.aws_advanced_ha.v1.4.0rc2.tmpl) 6ab0bffc426df7d31913f9a474b1a07860435e366b07d77b32064acfb2952c1f207beaed77013a15e44d80d74f3253e7cf9fbbe12a90ec7128de6facd097d68f\n            set hashes(asm-policy.tar.gz) 2d39ec60d006d05d8a1567a1d8aae722419e8b062ad77d6d9a31652971e5e67bc4043d81671ba2a8b12dd229ea46d205144f75374ed4cae58cefa8f9ab6533e6\n            set hashes(deploy_waf.sh) eebaf8593a29fa6e28bb65942d2b795edca0da08b357aa06277b0f4d2f25fe416da6438373f9955bdb231fa1de1a7c8d0ba7c224fa1f09bd852006070d887812\n            set hashes(f5.policy_creator.tmpl) 06539e08d115efafe55aa507ecb4e443e83bdb1f5825a9514954ef6ca56d240ed00c7b5d67bd8f67b815ee9dd46451984701d058c89dae2434c89715d375a620\n            set hashes(f5.service_discovery.tmpl) acc7c482a1eb8787a371091f969801b422cb92830b46460a3313b6a8e1cda0759f8013380e0c46d5214a351a248c029ec3ff04220aaef3e42a66badf9804041f\n\n            set file_path [lindex $tmsh::argv 1]\n            set file_name [file tail $file_path]\n\n            if {![info exists hashes($file_name)]} {\n                tmsh::log err \"No hash found for $file_name\"\n                exit 1\n            }\n\n            set expected_hash $hashes($file_name)\n            set computed_hash [lindex [exec /usr/bin/openssl dgst -r -sha512 $file_path] 0]\n            if { $expected_hash eq $computed_hash } {\n                exit 0\n            }\n            tmsh::log err \"Hash does not match for $file_path\"\n            exit 1\n        }]} {\n            tmsh::log err {Unexpected error in verifyHash}\n            exit 1\n        }\n    }\n    script-signature Kir5DhV/uRo0SwVRgPGrnNnAJBgHZ3XYraih5T90VbRZii5vPt0q3codJUdgoWiByQGpFREsa5Gy+v0+yYDAdYBzyZlThwRe+6RjWYfxP2+cKAC28wByJ0x6En1UD9kscj7ILUON5yv771izvIrxJ7x4Fd4RHcqB5++hWLvOLxXMiyJAYh2aUSOgdc+kx4lCHS6IU0aXtUxAQYpq510k4eS4UZJrfE7GPmpYkpRDJivR8UUyUWtuj0CAt3pWQEijKnC5zHhH6q5ikvQFn05PugcZO7RzOaA/a2gZw609wYAkXODMA6L49l+IKB31Y+/5ROB1w9/wf/H5RiP/kXC5/A==\n    signing-key /Common/f5-irule\n}",
                                "group": "root",
                                "mode": "000755",
                                "owner": "root"
                            },
                            "/config/cloud/aws/run_autoscale_update.sh": {
                                "content": {
                                    "Fn::Join": [
                                        "",
                                        [
                                            "#!/bin/bash\n",
                                            "f5-rest-node /config/cloud/aws/node_modules/f5-cloud-libs/scripts/autoscale.js",
                                            " --cloud aws --provider-options '",
                                            "s3Bucket:",
                                            {"Ref": "S3Bucket"},
                                            ",sqsUrl:",
                                            {"Ref": "SQSQueue"},
                                            ",mgmtPort:",
                                            {"Ref": "managementGuiPort"},
                                            "'",
                                            " --host localhost",
                                            " --port ",
                                            {"Ref": "managementGuiPort"},
                                            " --user cluster-admin",
                                            " --password-url file:///config/cloud/aws/.adminPassword",
                                            " --password-encrypted",
                                            " --device-group autoscale-group",
                                            " --cluster-action update",
                                            " --log-level silly --output /var/log/cloud/aws/aws-autoscale.log\n"
                                        ]
                                    ]
                                },
                                "mode": "000755",
                                "owner": "root",
                                "group": "root"
                            },
                            "/config/cloud/aws/custom-config.sh": {
                                "content": {
                                    "Fn::Join": [
                                        "",
                                        [
                                            "#!/bin/bash\n",
                                            "# Generated from v2.9.0\n",
                                            "date\n",
                                            ". /config/cloud/aws/onboard_config_vars\n",
                                            "BIGIP_ASG_NAME=`f5-rest-node /config/cloud/aws/node_modules/f5-cloud-libs/node_modules/f5-cloud-libs-aws/scripts/getAutoscaleGroupName.js` \n",
                                            "tmsh modify sys autoscale-group autoscale-group-id ${BIGIP_ASG_NAME} \n",
                                            "tmsh create sys icall script uploadMetrics definition { exec /config/cloud/aws/node_modules/f5-cloud-libs/node_modules/f5-cloud-libs-aws/scripts/reportMetrics.sh }\n",
                                            "tmsh create sys icall handler periodic /Common/metricUploadHandler { first-occurrence now interval 60 script /Common/uploadMetrics }\n",
                                            "(crontab -l 2>/dev/null; echo '*/2 * * * * /config/cloud/aws/run_autoscale_update.sh') | crontab -\n",
                                            "tmsh save /sys config\n",
                                            "echo 'Attempting to Join or Initiate LTM Autoscale Cluster' \n",
                                            "f5-rest-node /config/cloud/aws/node_modules/f5-cloud-libs/scripts/autoscale.js --cloud aws --provider-options s3Bucket:${s3Bucket},sqsUrl:${sqsUrl},mgmtPort:${managementGuiPort} --host localhost --port ${managementGuiPort} --user cluster-admin --password-url file:///config/cloud/aws/.adminPassword --password-encrypted --device-group autoscale-group --block-sync -c join --log-level debug --output /var/log/cloud/aws/aws-autoscale.log\n",
                                            "if [ -f /config/cloud/master ]; then \n",
                                            "  if `jq '.ucsLoaded' < /config/cloud/master`; then \n",
                                            "    echo \"UCS backup loaded from backup folder in S3 bucket ${s3Bucket}.\"\n",
                                            "  else\n",
                                            "    echo 'SELF-SELECTED as LTM Master ... Initiated LTM Autoscale Cluster ... Loading default config'\n",
                                            "    tmsh load sys application template /config/cloud/f5.http.v1.2.0rc7.tmpl\n",
                                            "    tmsh load sys application template /config/cloud/aws/f5.service_discovery.tmpl\n",
                                            "    ### START CUSTOM CONFIGURTION: \n",
                                            "    if [[ \"${appCertificateS3Arn}\" != \"default\" ]]; then\n",
                                            "        f5-rest-node /config/cloud/aws/node_modules/f5-cloud-libs/node_modules/f5-cloud-libs-aws/scripts/getCertFromS3.js ${appCertificateS3Arn}\n",
                                            "        tmsh install sys crypto pkcs12 site.example.com from-local-file /config/ssl/ssl.key/${appCertificateS3Arn##*/}\n",
                                            "        tmsh create ltm profile client-ssl example-clientssl-profile cert site.example.com.crt key site.example.com.key\n",
                                            "    else\n",
                                            "        tmsh create ltm profile client-ssl example-clientssl-profile cert default.crt key default.key\n",
                                            "    fi\n",
                                            "    APP_NAME=${deploymentName}\n",
                                            "    POOL_NAME_1=${APP_NAME}-1\n",
                                            "    POOL_NAME_2=${APP_NAME}-2\n",
                                            "    tmsh create ltm pool ${POOL_NAME_1} { monitor http }\n",
                                            "    tmsh create ltm pool ${POOL_NAME_2} { monitor http }\n",
                                            "    tmsh create ltm policy uri-routing-policy controls add { forwarding } requires add { http } strategy first-match legacy \n",
                                            "    tmsh modify ltm policy uri-routing-policy rules add { uri_1 { conditions add { 0 { http-uri path starts-with values { /static } } } actions add { 0 { forward select pool ${POOL_NAME_1} } } ordinal 1 } } \n",
                                            "    tmsh modify ltm policy uri-routing-policy rules add { uri_2 { conditions add { 0 { http-uri path starts-with values { /api } } } actions add { 0 { forward select pool ${POOL_NAME_2} } } ordinal 2 } } \n",
                                            "    tmsh create sys application service ${APP_NAME} { device-group autoscale-group template f5.http.v1.2.0rc7 lists add { local_traffic__policies { value { /Common/uri-routing-policy } } } tables add { pool__hosts { column-names { name } rows { { row { ${APP_NAME} } } } }  pool__members { column-names { addr port connection_limit } rows {{ row { ${APP_NAME} ${applicationPort} 0 }}}}} variables add { pool__pool_to_use { value /Common/${POOL_NAME_1} } pool__addr { value 0.0.0.0 } pool__mask { value 0.0.0.0 } pool__port { value ${virtualServicePort} } net__vlan_mode { value all } monitor__http_version { value http11 } ssl__client_ssl_profile { value /Common/example-clientssl-profile } ssl__mode { value client_ssl } ssl_encryption_questions__advanced { value yes } pool__port_secure { value 443 } pool__redirect_to_https { value yes } pool__redirect_port { value 80 }   }}\n",
                                            "    tmsh create sys application service ${POOL_NAME_1}_sd { template f5.service_discovery variables add { cloud__aws_use_role { value no } cloud__cloud_provider { value aws } cloud__aws_region { value ${region} } pool__interval { value 15 } pool__lb_method_choice { value least-connections-member } pool__member_conn_limit { value 0 } pool__pool_to_use { value /Common/${POOL_NAME_1} } pool__member_port { value ${applicationPort} } pool__public_private { value private } pool__tag_key { value ${applicationPoolTagKey} } pool__tag_value { value ${application1PoolTagValue} } }}\n",
                                            "    tmsh create sys application service ${POOL_NAME_2}_sd { template f5.service_discovery variables add { cloud__aws_use_role { value no } cloud__cloud_provider { value aws } cloud__aws_region { value ${region} } pool__interval { value 15 } pool__lb_method_choice { value least-connections-member } pool__member_conn_limit { value 0 } pool__pool_to_use { value /Common/${POOL_NAME_2} } pool__member_port { value ${applicationPort} } pool__public_private { value private } pool__tag_key { value ${applicationPoolTagKey} } pool__tag_value { value ${application2PoolTagValue} } }}\n",
                                            "    tmsh modify sys application service ${APP_NAME}.app/${APP_NAME} { variables add { client__standard_caching_without_wa { value \\\"/#do_not_use#\\\" } } } \n",
                                            "    tmsh modify sys application service ${APP_NAME}.app/${APP_NAME} execute-action definition \n",
                                            "    tmsh modify ltm virtual /Common/${APP_NAME}.app/${APP_NAME}_vs profiles add { websocket }\n",
                                            "    # CREATE QUICKSTART USER\n",
                                            "    quickstartPassword=$(cat /shared/vadc/aws/iid-document | jq -r .instanceId)\n",
                                            "    tmsh create auth user quickstart password ${quickstartPassword} shell bash partition-access replace-all-with { all-partitions { role admin } }\n",
                                            "    ### END CUSTOM CONFIGURATION\n",
                                            "    tmsh save /sys config\n",
                                            "    f5-rest-node /config/cloud/aws/node_modules/f5-cloud-libs/scripts/autoscale.js --cloud aws --provider-options s3Bucket:${s3Bucket},sqsUrl:${sqsUrl},mgmtPort:${managementGuiPort}",
                                            "      --host localhost --port ${managementGuiPort} --user cluster-admin --password-url file:///config/cloud/aws/.adminPassword --password-encrypted --log-level debug -c unblock-sync\n",
                                            "  fi\n",
                                            "fi\n",
                                            "date\n",
                                            "echo 'custom-config.sh complete'\n"
                                        ]
                                    ]
                                },
                                "mode": "000755",
                                "owner": "root",
                                "group": "root"
                            },
                            "/config/installCloudLibs.sh": {
                                "content": {
                                    "Fn::Join": [
                                        "\n",
                                        [
                                            "#!/bin/bash",
                                            "# Generated from v2.9.0\n",
                                            "echo about to execute",
                                            "checks=0",
                                            "while [ $checks -lt 120 ]; do echo checking mcpd",
                                            "    tmsh -a show sys mcp-state field-fmt | grep -q running",
                                            "    if [ $? == 0 ]; then",
                                            "        echo mcpd ready",
                                            "        break",
                                            "    fi",
                                            "    echo mcpd not ready yet",
                                            "    let checks=checks+1",
                                            "    sleep 10",
                                            "done",
                                            "echo loading verifyHash script",
                                            "if ! tmsh load sys config merge file /config/verifyHash; then",
                                            "    echo cannot validate signature of /config/verifyHash",
                                            "    exit",
                                            "fi",
                                            "echo loaded verifyHash",
                                            "declare -a filesToVerify=(\"/config/cloud/f5-cloud-libs.tar.gz\" \"/config/cloud/f5-cloud-libs-aws.tar.gz\" \"/config/cloud/aws/f5.service_discovery.tmpl\")",
                                            "for fileToVerify in \"${filesToVerify[@]}\"",
                                            "do",
                                            "    echo verifying \"$fileToVerify\"",
                                            "    if ! tmsh run cli script verifyHash \"$fileToVerify\"; then",
                                            "       echo \"$fileToVerify\" is not valid",
                                            "        exit 1",
                                            "    fi",
                                            "    echo verified \"$fileToVerify\"",
                                            "done",
                                            "mkdir -p /config/cloud/aws/node_modules",
                                            "echo expanding f5-cloud-libs.tar.gz",
                                            "tar xvfz /config/cloud/f5-cloud-libs.tar.gz -C /config/cloud/aws/node_modules",
                                            "echo installing dependencies",
                                            "tar xvfz /config/cloud/f5-cloud-libs-aws.tar.gz -C /config/cloud/aws/node_modules/f5-cloud-libs/node_modules",
                                            "echo cloud libs install complete",
                                            "touch /config/cloud/cloudLibsReady"
                                        ]
                                    ]
                                },
                                "mode": "000755",
                                "owner": "root",
                                "group": "root"
                            },
                            "/config/cloud/getNameServer.sh": {
                                "content": {
                                    "Fn::Join": [
                                        "\n",
                                        [
                                            "# Generated from v2.9.0\n",
                                            "INTERFACE=$1",
                                            "INTERFACE_MAC=`ifconfig ${INTERFACE} | egrep HWaddr | awk '{print tolower($5)}'`",
                                            "VPC_CIDR_BLOCK=`curl -s http://169.254.169.254/latest/meta-data/network/interfaces/macs/${INTERFACE_MAC}/vpc-ipv4-cidr-block`",
                                            "VPC_NET=${VPC_CIDR_BLOCK%/*}",
                                            "NAME_SERVER=`echo ${VPC_NET} | awk -F. '{ printf \"%d.%d.%d.%d\", $1, $2, $3, $4+2 }'`",
                                            "echo $NAME_SERVER"
                                        ]
                                    ]
                                },
                                "mode": "000755",
                                "owner": "root",
                                "group": "root"
                            },
                            "/config/cloud/waitThenRun.sh": {
                                "content": {
                                    "Fn::Join": [
                                        "\n",
                                        [
                                            "#!/bin/bash",
                                            "# Generated from v2.9.0\n",
                                            "while true; do echo waiting for cloud libs install to complete",
                                            "    if [ -f /config/cloud/cloudLibsReady ]; then",
                                            "        echo cloud libs installed",
                                            "        break",
                                            "    else",
                                            "        sleep 10",
                                            "    fi",
                                            "done",
                                            "\"$@\""
                                        ]
                                    ]
                                },
                                "mode": "000755",
                                "owner": "root",
                                "group": "root"
                            }
                        },
                        "commands": {
                            "000-disable-1nicautoconfig": {
                                "command": "/usr/bin/setdb provision.1nicautoconfig disable"
                            },
                            "010-install-libs": {
                                "command": "mkdir -p /var/log/cloud/aws; nohup /config/installCloudLibs.sh &>> /var/log/cloud/aws/cloudlibs-install.log < /dev/null &"
                            },
                            "020-generate-password": {
                                "command": {
                                    "Fn::Join": [
                                        "",
                                        [
                                            "nohup /config/cloud/waitThenRun.sh",
                                            " f5-rest-node /config/cloud/aws/node_modules/f5-cloud-libs/scripts/runScript.js",
                                            " --signal PASSWORD_CREATED",
                                            " --file f5-rest-node",
                                            " --cl-args '/config/cloud/aws/node_modules/f5-cloud-libs/scripts/generatePassword --file /config/cloud/aws/.adminPassword --encrypt'",
                                            " --log-level debug",
                                            " -o /var/log/cloud/aws/generatePassword.log",
                                            " &>> /var/log/cloud/aws/cloudlibs-install.log < /dev/null",
                                            " &"
                                        ]
                                    ] 
                                }
                            },
                            "030-create-admin-user": {
                                "command": {
                                    "Fn::Join": [
                                        "",
                                        [
                                            "nohup /config/cloud/waitThenRun.sh",
                                            " f5-rest-node /config/cloud/aws/node_modules/f5-cloud-libs/scripts/runScript.js",
                                            " --wait-for PASSWORD_CREATED",
                                            " --signal ADMIN_CREATED",
                                            " --file /config/cloud/aws/node_modules/f5-cloud-libs/scripts/createUser.sh",
                                            " --cl-args '--user cluster-admin",
                                            " --password-file /config/cloud/aws/.adminPassword",
                                            " --password-encrypted",
                                            "'",
                                            " --log-level debug",
                                            " -o /var/log/cloud/aws/createUser.log",
                                            " &>> /var/log/cloud/aws/cloudlibs-install.log < /dev/null",
                                            " &"
                                        ]
                                    ]
                                }
                            },
                            "040-network-config": {
                                "command": {
                                    "Fn::Join": [
                                        " ",
                                        [
                                            "nohup /config/cloud/waitThenRun.sh",
                                            "f5-rest-node /config/cloud/aws/node_modules/f5-cloud-libs/scripts/runScript.js",
                                            "--file /config/cloud/aws/node_modules/f5-cloud-libs/scripts/aws/1nicSetup.sh",
                                            "--cwd /config/cloud/aws/node_modules/f5-cloud-libs/scripts/aws",
                                            "--log-level debug",
                                            "-o /var/log/cloud/aws/1nicSetup.log",
                                            "--wait-for ADMIN_CREATED",
                                            "--signal NETWORK_CONFIG_DONE",
                                            "&>> /var/log/cloud/aws/cloudlibs-install.log < /dev/null",
                                            "&"
                                        ]
                                    ]
                                }
                            },
                            "050-onboard-BIG-IP": {
                                "command": {
                                    "Fn::If": [
                                        "optin",
                                        {
                                            "Fn::Join": [
                                                " ",
                                                [
                                                    "DEPLOYMENTID=`echo \"",
                                                    {
                                                      "Ref": "AWS::StackId"
                                                    },
                                                    "\"|sha512sum|cut -d \" \" -f 1`;",
                                                    "CUSTOMERID=`echo \"",
                                                    {
                                                      "Ref": "AWS::AccountId"
                                                    },
                                                    "\"|sha512sum|cut -d \" \" -f 1`;",
                                                    "NAME_SERVER=`/config/cloud/getNameServer.sh eth0`;",
                                                    "nohup /config/cloud/waitThenRun.sh",
                                                    "f5-rest-node /config/cloud/aws/node_modules/f5-cloud-libs/scripts/onboard.js",
                                                    "--log-level debug",
                                                    "--wait-for NETWORK_CONFIG_DONE",
                                                    "-o /var/log/cloud/aws/onboard.log",
                                                    "--host localhost",
                                                    "--user cluster-admin",
                                                    "--password-url file:///config/cloud/aws/.adminPassword",
                                                    "--password-encrypted",
                                                    "--hostname `curl http://169.254.169.254/latest/meta-data/hostname`",
                                                    "--ntp ",
                                                    { "Ref": "ntpServer" },
                                                    "--tz ",
                                                    { "Ref": "timezone" },
                                                    "--dns ${NAME_SERVER}",
                                                    "--port 8443",
                                                    "--ssl-port ",
                                                    { "Ref": "managementGuiPort" },
                                                    "--module ltm:nominal",
                                                    "--metrics \"cloudName:aws,region:${region},bigipVersion:13.1.0.2-0.0.6,customerId:${CUSTOMERID},deploymentId:${DEPLOYMENTID},templateName:f5-hourly-autoscale-bigip-ltm-nlb.template,templateVersion:2.9.0,licenseType:hourly\"",
                                                    "--ping",
                                                    "&>> /var/log/cloud/aws/cloudlibs-install.log < /dev/null",
                                                    "&"
                                                ]
                                            ]
                                        },
                                        {
                                            "Fn::Join": [
                                                " ",
                                                [
                                                    "NAME_SERVER=`/config/cloud/getNameServer.sh eth0`;",
                                                    "nohup /config/cloud/waitThenRun.sh",
                                                    "f5-rest-node /config/cloud/aws/node_modules/f5-cloud-libs/scripts/onboard.js",
                                                    "--log-level debug",
                                                    "--wait-for NETWORK_CONFIG_DONE",
                                                    "-o /var/log/cloud/aws/onboard.log",
                                                    "--host localhost",
                                                    "--user cluster-admin",
                                                    "--password-url file:///config/cloud/aws/.adminPassword",
                                                    "--password-encrypted",
                                                    "--hostname `curl http://169.254.169.254/latest/meta-data/hostname`",
                                                    "--ntp ",
                                                    { "Ref": "ntpServer" },
                                                    "--tz ",
                                                    { "Ref": "timezone" },
                                                    "--dns ${NAME_SERVER}",
                                                    "--port 8443",
                                                    "--ssl-port ",
                                                    { "Ref": "managementGuiPort" },
                                                    "--module ltm:nominal",
                                                    "--ping",
                                                    "&>> /var/log/cloud/aws/cloudlibs-install.log < /dev/null",
                                                    "&"
                                                ]
                                            ]
                                        }
                                    ]
                                }
                            },
                            "060-custom-config": {
                                "command": {
                                    "Fn::Join": [
                                        " ",
                                        [
                                            "nohup /config/cloud/waitThenRun.sh",
                                            "f5-rest-node /config/cloud/aws/node_modules/f5-cloud-libs/scripts/runScript.js",
                                            "--log-level debug",
                                            "--file /config/cloud/aws/custom-config.sh",
                                            "--cwd /config/cloud/aws",
                                            "-o /var/log/cloud/aws/custom-config.log",
                                            "--wait-for ONBOARD_DONE",
                                            "&>> /var/log/cloud/aws/cloudlibs-install.log < /dev/null",
                                            "&"
                                        ]
                                    ]
                                }
                            }
                        }
                    }
                }
            },
            "Properties": {
                "BlockDeviceMappings": [
                    {
                        "DeviceName": "/dev/xvda",
                        "Ebs": {
                            "DeleteOnTermination": "true",
                            "VolumeType": "gp2"
                        }
                    },
                    {
                        "DeviceName": "/dev/xvdb",
                        "NoDevice": "true"
                    }
                ],
                "AssociatePublicIpAddress": true,
                "ImageId": {
                    "Fn::FindInMap": [
                        "BigipRegionMap",
                        {
                            "Ref": "AWS::Region"
                        },
                        {
                            "Fn::FindInMap": [
                                "AWSBigipThrougput",
                                {
                                    "Ref": "throughput"
                                },
                                {
                                    "Ref": "imageName"
                                }
                            ]
                        }
                    ]
                },
                "InstanceMonitoring": false,
                "InstanceType": {
                    "Ref": "instanceType"
                },
                "IamInstanceProfile": {
                    "Ref": "BigipAutoScalingInstanceProfile"
                },
                "KeyName": {
                    "Ref": "sshKey"
                },
                "SecurityGroups": [
                    {
                        "Ref": "bigipSecurityGroup"
                    }
                ],
                "UserData": {
                    "Fn::Base64": {
                        "Fn::Join": [
                            "",
                            [
                                "#!/bin/bash -x\n",
                                "/opt/aws/apitools/cfn-init-1.4-0.amzn1/bin/cfn-init -v -s ",
                                {
                                    "Ref": "AWS::StackId"
                                },
                                " -r BigipLaunchConfig",
                                " --region ",
                                {
                                    "Ref": "AWS::Region"
                                },
                                "\n"
                            ]
                        ]
                    }
                }
            }
        },
        "BigipAutoscaleGroup": {
            "Type": "AWS::AutoScaling::AutoScalingGroup",
            "Properties": {
                "VPCZoneIdentifier": { "Ref": "subnets" },
                "Cooldown": "1500",
                "TargetGroupARNs": [
                    "Fn::If": [noTargetGroup,
                        {"Ref" : "AWS::NoValue"},
                        {"Ref": "bigipNetworkLoadBalancerTargetGroupsArns"}
                    ]
                ],
                "HealthCheckGracePeriod": "1500",
                "HealthCheckType": "EC2",
                "LaunchConfigurationName": {
                    "Ref": "BigipLaunchConfig"
                },
                "MaxSize": {
                    "Ref": "scalingMaxSize"
                },
                "MinSize": {
                    "Ref": "scalingMinSize"
                },
                "DesiredCapacity" : {
                    "Ref": "scalingMinSize"
                },
                "MetricsCollection": [
                    {
                        "Granularity": "1Minute"
                    }
                ],
                "NotificationConfigurations": [
                    {
                        "TopicARN": {
                            "Ref": "SNSTopic"
                        },
                        "NotificationTypes": [
                            "autoscaling:EC2_INSTANCE_LAUNCH",
                            "autoscaling:EC2_INSTANCE_LAUNCH_ERROR",
                            "autoscaling:EC2_INSTANCE_TERMINATE",
                            "autoscaling:EC2_INSTANCE_TERMINATE_ERROR"
                        ]
                    }
                ],
                "Tags": [
                    {
                        "Key": "Name",
                        "Value": {
                            "Fn::Join": [
                                "",
                                [
                                    "BIG-IP-autoscale-instance-",
                                    {
                                        "Ref": "deploymentName"
                                    }
                                ]
                            ]
                        },
                        "PropagateAtLaunch": true
                    },
                    {
                        "Key": "Application",
                        "Value": {
                            "Ref": "application"
                        },
                        "PropagateAtLaunch": true
                    },
                    {
                        "Key": "Environment",
                        "Value": {
                            "Ref": "environment"
                        },
                        "PropagateAtLaunch": true
                    },
                    {
                        "Key": "Group",
                        "Value": {
                            "Ref": "group"
                        },
                        "PropagateAtLaunch": true
                    },
                    {
                        "Key": "Owner",
                        "Value": {
                            "Ref": "owner"
                        },
                        "PropagateAtLaunch": true
                    },
                    {
                        "Key": "Costcenter",
                        "Value": {
                            "Ref": "costcenter"
                        },
                        "PropagateAtLaunch": true
                    }
                ]
            },
            "UpdatePolicy": {
                "AutoScalingRollingUpdate": {
                    "MaxBatchSize": "1",
                    "MinInstancesInService": "1",
                    "PauseTime": "PT30M"
                }
            }
        },
        "BigipScaleUpPolicy": {
            "Type": "AWS::AutoScaling::ScalingPolicy",
            "Properties": {
                "AdjustmentType": "ChangeInCapacity",
                "AutoScalingGroupName": {
                    "Ref": "BigipAutoscaleGroup"
                },
                "Cooldown": "1500",
                "ScalingAdjustment": "1"
            }
        },
        "BigipScaleDownPolicy": {
            "Type": "AWS::AutoScaling::ScalingPolicy",
            "Properties": {
                "AdjustmentType": "ChangeInCapacity",
                "AutoScalingGroupName": {
                    "Ref": "BigipAutoscaleGroup"
                },
                "Cooldown": "1500",
                "ScalingAdjustment": "-1"
            }
        },
        "BigipHighbytesAlarm": {
            "Type": "AWS::CloudWatch::Alarm",
            "DependsOn": "BigipAutoscaleGroup",
            "Properties": {
                "ActionsEnabled": "True",
                "AlarmActions": [
                    {
                        "Ref": "BigipScaleUpPolicy"
                    }
                ],
                "AlarmDescription": "Throughput exceeds average threshold after 1 successive interval of 1 minute",
                "ComparisonOperator": "GreaterThanThreshold",
                "EvaluationPeriods": "1",
                "MetricName": "throughput-per-sec",
                "Namespace": {
                    "Ref": "BigipAutoscaleGroup"
                },
                "Period": "60",
                "Statistic": "Average",
                "Threshold": {
                    "Ref": "scaleUpBytesThreshold"
                }
            }
        },
        "BigipLowbytesAlarm": {
            "Type": "AWS::CloudWatch::Alarm",
            "DependsOn": "BigipAutoscaleGroup",
            "Properties": {
                "ActionsEnabled": "True",
                "AlarmActions": [
                    {
                        "Ref": "BigipScaleDownPolicy"
                    }
                ],
                "AlarmDescription": "Throughput below average threshold for 10 successive intervals of 5 minutes",
                "ComparisonOperator": "LessThanThreshold",
                "EvaluationPeriods": "10",
                "MetricName": "throughput-per-sec",
                "Namespace": {
                    "Ref": "BigipAutoscaleGroup"
                },
                "Period": "300",
                "Statistic": "Average",
                "Threshold": {
                    "Ref": "scaleDownBytesThreshold"
                }
            }
        },
        "BigipHighCpuAlarm": {
            "Type": "AWS::CloudWatch::Alarm",
            "DependsOn": "BigipAutoscaleGroup",
            "Properties": {
                "ActionsEnabled": "True",
                "AlarmActions": [
                    {
                        "Ref": "BigipScaleUpPolicy"
                    }
                ],
                "AlarmDescription": "CPU usage % exceeds average threshold after 1 successive interval of 1 minute",
                "ComparisonOperator": "GreaterThanThreshold",
                "EvaluationPeriods": "1",
                "MetricName": "tmm-stat",
                "Namespace": {
                    "Ref": "BigipAutoscaleGroup"
                },
                "Period": "60",
                "Statistic": "Average",
                "Threshold": {
                    "Ref": "highCpuThreshold"
                }
            }
        },
        "BigipLowCpuAlarm": {
            "Type": "AWS::CloudWatch::Alarm",
            "DependsOn": "BigipAutoscaleGroup",
            "Properties": {
                "ActionsEnabled": "True",
                "AlarmActions": [
                    {
                        "Ref": "BigipScaleDownPolicy"
                    }
                ],
                "AlarmDescription": "Throughput below average threshold for 10 successive intervals of 5 minutes",
                "ComparisonOperator": "LessThanThreshold",
                "EvaluationPeriods": "10",
                "MetricName": "tmm-stat",
                "Namespace": {
                    "Ref": "BigipAutoscaleGroup"
                },
                "Period": "300",
                "Statistic": "Average",
                "Threshold": {
                    "Ref": "lowCpuThreshold"
                }
            }
        }
    },
    "Outputs": {
        "BIGIPAutoscaleGroup": {
            "Value": {
                "Ref": "BigipAutoscaleGroup"
            }
        },
        "BIGIPSecurityGroup": {
            "Value": {
                "Ref": "bigipSecurityGroup"
            }
        },
        "BIGIPS3Bucket": {
            "Value": {
                "Ref": "S3Bucket"
            }
        }
    }
}

